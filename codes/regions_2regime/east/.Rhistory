## CAUTION: panel structure will mess things up when calculating Moran's I
panel_ct_spdata_long <- pdata.frame(ct_spdata_long, index = c("城市shapefile", "year"))
## summarize the data
summary(ct_spdata_long)
## deprecated. 8nn may be too large.
## Identify coordinates of the centroid of the multipolygon
## coords <- st_centroid(st_geometry(ct_spdata_wide))
## Create our 8 NN matrix
## Note that the latitude and longitude are handled using great circle distances
## R2 distances will be inaccurate
## knn8W <- knearneigh(coords, k = 8)
## Convert our knn object to neighborhood list
## list8nn <- knn2nb(knn8W)
## Convert to a matrix object
## matrix8nn <- spdep::nb2mat(list8nn)
## Convert our neighborhood list to an listw object
## listw8nn <- spdep::nb2listw(list8nn)
## Plot the neighborhood relationships
## plot(list8nn, coords)
## Identify coordinates of the centroid of the multipolygon
coords <- st_centroid(st_geometry(ct_spdata_wide))
## Create our 3,4,5,6 NN matrix
## Note that the latitude and longitude are handled using great circle distances
## R2 distances will be inaccurate
knn3W <- knearneigh(coords, k = 3)
knn4W <- knearneigh(coords, k = 4)
knn5W <- knearneigh(coords, k = 5)
knn6W <- knearneigh(coords, k = 6)
## Convert our knn objects to neighborhood list
list3nn <- knn2nb(knn3W)
list4nn <- knn2nb(knn4W)
list5nn <- knn2nb(knn5W)
list6nn <- knn2nb(knn6W)
## Convert to a matrix object
matrix3nn <- spdep::nb2mat(list3nn)
matrix4nn <- spdep::nb2mat(list4nn)
matrix5nn <- spdep::nb2mat(list5nn)
matrix6nn <- spdep::nb2mat(list6nn)
## Convert our neighborhood list to an listw object
listw3nn <- spdep::nb2listw(list3nn)
## Plot the neighborhood relationships
# plot(list4nn, coords)
## Neighbourhood contiguity by distance
d100nb <- dnearneigh(coords, 0, 100)
d150nb <- dnearneigh(coords, 0, 150)
d200nb <- dnearneigh(coords, 0, 200)
summary(d200nb)
## convert them to matrix
d100nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd100nb
d150nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd150nb
d200nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd200nb
## Create another weighting matrix based on contiguity relations (queen).
##ct_spdata_wide %>% spdep::poly2nb("geometry") %>%
##  spdep::nb2mat(zero.policy = TRUE) -> matrixcont
##ct_spdata_wide %>% spdep::poly2nb("geometry") %>%  spdep::nb2listw(zero.policy = TRUE) -> listwnb
## Create spatial lag for some variables
splag <- function(x, n, t, w){
wx <- rep(NA, length(x))
# create spatial lags
for (i in 1:t){
wx[(n*(i-1)+1):(n*i)] <- w %*% as.matrix(x[(n*(i-1)+1):(n*i)])
}
wx
}
ct_spdata_long$lagtarl = splag(x = ct_spdata_long$tarl, n = 80, t = 9, w = matrix6nn)
ct_spdata_long$lagGDP = splag(x = ct_spdata_long$GDP, n = 80, t = 9, w = matrix6nn)
ct_spdata_long$lagGDPpc = splag(x = ct_spdata_long$GDPpc, n = 80, t = 9, w = matrix6nn)
ct_spdata_long$lagslry = splag(x = ct_spdata_long$slry, n = 80, t = 9, w = matrix6nn)
ct_spdata_long$lagtarl = splag(x = ct_spdata_long$tarl, n = 80, t = 9, w = matrix6nn)
ct_spdata_long$lagpop = splag(x = ct_spdata_long$pop, n = 80, t = 9, w = matrix6nn)
ct_spdata_long$lagterti = splag(x = ct_spdata_long$terti, n = 80, t = 9, w = matrix6nn)
ct_spdata_long$laginvest = splag(x = ct_spdata_long$invest, n = 80, t = 9, w = matrix6nn)
ct_spdata_long$lagtaxi = splag(x = ct_spdata_long$taxi, n = 80, t = 9, w = matrix6nn)
ct_spdata_long$laghotel = splag(x = ct_spdata_long$hotel, n = 80, t = 9, w = matrix6nn)
ct_spdata_long$lagspot5A = splag(x = ct_spdata_long$spot5A, n = 80, t = 9, w = matrix6nn)
ct_spdata_long$laggrnld = splag(x = ct_spdata_long$grnld, n = 80, t = 9, w = matrix6nn)
ct_spdata_long$lagavexp = splag(x = ct_spdata_long$tavexp, n = 80, t = 9, w = matrix6nn)
panel_ct_spdata_long <- ct_spdata_long %>% pdata.frame(index = c("城市shapefile", "year"))
panel_tlaged_ct_spdata_long <- panel_ct_spdata_long
## Use the independent variables from the previous year
for (i in 8:ncol(panel_tlaged_ct_spdata_long)) {
panel_tlaged_ct_spdata_long[[i]] <- as.numeric(lag(panel_tlaged_ct_spdata_long[[i]], 1))
}
## Drop all observations with missing values
panel_tlaged_ct_spdata_long <- panel_tlaged_ct_spdata_long %>% filter(!(year == 2011)) %>% arrange(year, indicator)
tlaged_ct_spdata_long <- panel_tlaged_ct_spdata_long
tlaged_ct_spdata_long <- lapply(tlaged_ct_spdata_long, function(x){attr(x, "index") <- NULL; x}) %>% as.data.frame()  %>% arrange(year, indicator)
summary(tlaged_ct_spdata_long)
## Create indicators using total arrivals
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_tarl = case_when(
tarl >= lagtarl ~  1,
tarl < lagtarl ~ 0
)
)
## Create indicators using GDP
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_gdp = case_when(
GDP >= lagGDP ~  1,
GDP < lagGDP ~ 0
)
)
## Create indicators using GDP per capita
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_gdppc = case_when(
GDPpc >= lagGDPpc ~  1,
GDPpc < lagGDPpc ~ 0
)
)
## Create indicators using third industry development level
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_terti = case_when(
terti >= lagterti ~  1,
terti < lagterti ~ 0
)
)
summary(tlaged_ct_spdata_long)
# check they are in the right position
# important!!
location_test <- rep(FALSE, 8)
for (i in 1:8){
location_test[[i]] <-   identical(ct_spdata_wide$城市shapefile,(as.character(tlaged_ct_spdata_long$城市shapefile))[(86*(i-1)+1):(86*i)])
}
location_test # should be 8 TRUEs
# check they are in the right position
# important!!
location_test <- rep(FALSE, 8)
for (i in 1:8){
location_test[[i]] <-   identical(ct_spdata_wide$城市shapefile,(as.character(tlaged_ct_spdata_long$城市shapefile))[(80*(i-1)+1):(80*i)])
}
location_test # should be 8 TRUEs
tlaged_ct_spdata_long %>%
as.data.frame() %>%
select(!geometry) %>%
xlsx::write.xlsx2("/Users/jialiangchen/Documents/spmodeltoruism/codes/regions_2regime/central/tlaged_central_spdata_long.xlsx")
rm(list = ls())
## Load and install the R packages we might will be using.
pacman::p_load(sf, tidyverse, magrittr, data.table, hrbrthemes, zoo, GWmodel, spatialreg, spdep, plm, splm, pspatreg, zoo, chatgpt, xlsx, olsrr)
# Replace the absolute path of the `cities_included.shp` file on your computer.
# Drag the file to terminal (command + space, then search `terminal` on spotlight) if you are in mac, the path will appear.
ct_shape <- st_read("/Users/jialiangchen/Documents/spmodeltoruism/shapefiles/west/west.shp")
## Import more data.
## change the absolute path on your computer, same as above
ct_data <- read.csv("/Users/jialiangchen/Documents/spmodeltoruism/data/dataforR.csv")
## Perform a left join for our datasets.
ct_spdata_wide <- left_join(
ct_shape %>% select(NL_NAME_2, geometry) %>% rename(城市shapefile = NL_NAME_2),
ct_data,
by = "城市shapefile"
)
ct_spdata_wide %<>% arrange(城市shapefile)
ct_spdata_wide$indicator = 1:85
ct_spdata_wide %<>% select(indicator, everything())
## Reshape our data to long(tidy) form.
ct_spdata_long <- ct_spdata_wide %>%
pivot_longer(
cols = tarl_2011:grnld_2019,
names_to = c(".value", "year"),
names_pattern = "(.+)_(.+)"
) %>% select(indicator, everything())
## Create average tourist expenditure variable in RMBs
ct_spdata_long %<>%
mutate(
tavexp =  (trev/tarl)*1000,
dmavexp = (dmrev/dmarl)*1000
)
## Some place has zero international arrival
## Avoid division by zero
ct_spdata_long %<>%
mutate(
inavexp = case_when(
inarl > 0 ~  (inrev/inarl)*7*1000,
inarl == 0 ~  0
)
)
## Create average tourist expenditure variable in RMBs## Convert the "human" variables from 10 thousands to thousands, just for consistency
ct_spdata_long %<>%
mutate(emphotel = emphotel * 10,
pop = pop * 10
)
## linear interpolation to deal with missing values
ct_spdata_long %<>%
mutate(across(c(tarl:inavexp), \(x) zoo::na.approx(x, rule = 2)))
## check if there are still NA left
sum(is.na(ct_spdata_long))
## rearrange the rows
ct_spdata_long %<>% arrange(year, indicator)
## check they are in the right position. Important!
identical(ct_spdata_wide$城市shapefile,( ct_spdata_long %>% filter(year == 2011))$城市shapefile)
## panel
## CAUTION: panel structure will mess things up when calculating Moran's I
panel_ct_spdata_long <- pdata.frame(ct_spdata_long, index = c("城市shapefile", "year"))
## summarize the data
summary(ct_spdata_long)
## deprecated. 8nn may be too large.
## Identify coordinates of the centroid of the multipolygon
## coords <- st_centroid(st_geometry(ct_spdata_wide))
## Create our 8 NN matrix
## Note that the latitude and longitude are handled using great circle distances
## R2 distances will be inaccurate
## knn8W <- knearneigh(coords, k = 8)
## Convert our knn object to neighborhood list
## list8nn <- knn2nb(knn8W)
## Convert to a matrix object
## matrix8nn <- spdep::nb2mat(list8nn)
## Convert our neighborhood list to an listw object
## listw8nn <- spdep::nb2listw(list8nn)
## Plot the neighborhood relationships
## plot(list8nn, coords)
## Identify coordinates of the centroid of the multipolygon
coords <- st_centroid(st_geometry(ct_spdata_wide))
## Create our 3,4,5,6 NN matrix
## Note that the latitude and longitude are handled using great circle distances
## R2 distances will be inaccurate
knn3W <- knearneigh(coords, k = 3)
knn4W <- knearneigh(coords, k = 4)
knn5W <- knearneigh(coords, k = 5)
knn6W <- knearneigh(coords, k = 6)
## Convert our knn objects to neighborhood list
list3nn <- knn2nb(knn3W)
list4nn <- knn2nb(knn4W)
list5nn <- knn2nb(knn5W)
list6nn <- knn2nb(knn6W)
## Convert to a matrix object
matrix3nn <- spdep::nb2mat(list3nn)
matrix4nn <- spdep::nb2mat(list4nn)
matrix5nn <- spdep::nb2mat(list5nn)
matrix6nn <- spdep::nb2mat(list6nn)
## Convert our neighborhood list to an listw object
listw3nn <- spdep::nb2listw(list3nn)
## Plot the neighborhood relationships
# plot(list4nn, coords)
## Neighbourhood contiguity by distance
d100nb <- dnearneigh(coords, 0, 100)
d150nb <- dnearneigh(coords, 0, 150)
d200nb <- dnearneigh(coords, 0, 200)
summary(d200nb)
## convert them to matrix
d100nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd100nb
d150nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd150nb
d200nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd200nb
## Create another weighting matrix based on contiguity relations (queen).
ct_spdata_wide %>% spdep::poly2nb("geometry") %>%
spdep::nb2mat(zero.policy = TRUE) -> matrixcont
ct_spdata_wide %>% spdep::poly2nb("geometry") %>%  spdep::nb2listw(zero.policy = TRUE) -> listwnb
## Create spatial lag for some variables
splag <- function(x, n, t, w){
wx <- rep(NA, length(x))
# create spatial lags
for (i in 1:t){
wx[(n*(i-1)+1):(n*i)] <- w %*% as.matrix(x[(n*(i-1)+1):(n*i)])
}
wx
}
ct_spdata_long$lagtarl = splag(x = ct_spdata_long$tarl, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagGDP = splag(x = ct_spdata_long$GDP, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagGDPpc = splag(x = ct_spdata_long$GDPpc, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagslry = splag(x = ct_spdata_long$slry, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagtarl = splag(x = ct_spdata_long$tarl, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagpop = splag(x = ct_spdata_long$pop, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagterti = splag(x = ct_spdata_long$terti, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$laginvest = splag(x = ct_spdata_long$invest, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagtaxi = splag(x = ct_spdata_long$taxi, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$laghotel = splag(x = ct_spdata_long$hotel, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagspot5A = splag(x = ct_spdata_long$spot5A, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$laggrnld = splag(x = ct_spdata_long$grnld, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagavexp = splag(x = ct_spdata_long$tavexp, n = 85, t = 9, w = matrix6nn)
panel_ct_spdata_long <- ct_spdata_long %>% pdata.frame(index = c("城市shapefile", "year"))
panel_tlaged_ct_spdata_long <- panel_ct_spdata_long
## Use the independent variables from the previous year
for (i in 8:ncol(panel_tlaged_ct_spdata_long)) {
panel_tlaged_ct_spdata_long[[i]] <- as.numeric(lag(panel_tlaged_ct_spdata_long[[i]], 1))
}
## Drop all observations with missing values
panel_tlaged_ct_spdata_long <- panel_tlaged_ct_spdata_long %>% filter(!(year == 2011)) %>% arrange(year, indicator)
tlaged_ct_spdata_long <- panel_tlaged_ct_spdata_long
tlaged_ct_spdata_long <- lapply(tlaged_ct_spdata_long, function(x){attr(x, "index") <- NULL; x}) %>% as.data.frame()  %>% arrange(year, indicator)
summary(tlaged_ct_spdata_long)
## Create indicators using total arrivals
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_tarl = case_when(
tarl >= lagtarl ~  1,
tarl < lagtarl ~ 0
)
)
## Create indicators using GDP
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_gdp = case_when(
GDP >= lagGDP ~  1,
GDP < lagGDP ~ 0
)
)
## Create indicators using GDP per capita
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_gdppc = case_when(
GDPpc >= lagGDPpc ~  1,
GDPpc < lagGDPpc ~ 0
)
)
## Create indicators using third industry development level
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_terti = case_when(
terti >= lagterti ~  1,
terti < lagterti ~ 0
)
)
summary(tlaged_ct_spdata_long)
# check they are in the right position
# important!!
location_test <- rep(FALSE, 8)
for (i in 1:8){
location_test[[i]] <-   identical(ct_spdata_wide$城市shapefile,(as.character(tlaged_ct_spdata_long$城市shapefile))[(85*(i-1)+1):(85*i)])
}
location_test # should be 8 TRUEs
tlaged_ct_spdata_long %>%
as.data.frame() %>%
select(!geometry) %>%
xlsx::write.xlsx2("/Users/jialiangchen/Documents/spmodeltoruism/codes/regions_2regime/west/tlaged_west_spdata_long.xlsx")
## Load and install the R packages we might will be using.
pacman::p_load(sf, tidyverse, magrittr, data.table, hrbrthemes, zoo, GWmodel, spatialreg, spdep, plm, splm, pspatreg, zoo, chatgpt, xlsx, olsrr)
# Replace the absolute path of the `cities_included.shp` file on your computer.
# Drag the file to terminal (command + space, then search `terminal` on spotlight) if you are in mac, the path will appear.
ct_shape <- st_read("/Users/jialiangchen/Documents/spmodeltoruism/shapefiles/northeast/norteast.shp")
## Import more data.
## change the absolute path on your computer, same as above
ct_data <- read.csv("/Users/jialiangchen/Documents/spmodeltoruism/data/dataforR.csv")
## Perform a left join for our datasets.
ct_spdata_wide <- left_join(
ct_shape %>% select(NL_NAME_2, geometry) %>% rename(城市shapefile = NL_NAME_2),
ct_data,
by = "城市shapefile"
)
ct_spdata_wide %<>% arrange(城市shapefile)
ct_spdata_wide$indicator = 1:32
ct_spdata_wide %<>% select(indicator, everything())
## Reshape our data to long(tidy) form.
ct_spdata_long <- ct_spdata_wide %>%
pivot_longer(
cols = tarl_2011:grnld_2019,
names_to = c(".value", "year"),
names_pattern = "(.+)_(.+)"
) %>% select(indicator, everything())
## Create average tourist expenditure variable in RMBs
ct_spdata_long %<>%
mutate(
tavexp =  (trev/tarl)*1000,
dmavexp = (dmrev/dmarl)*1000
)
## Some place has zero international arrival
## Avoid division by zero
ct_spdata_long %<>%
mutate(
inavexp = case_when(
inarl > 0 ~  (inrev/inarl)*7*1000,
inarl == 0 ~  0
)
)
## Create average tourist expenditure variable in RMBs## Convert the "human" variables from 10 thousands to thousands, just for consistency
ct_spdata_long %<>%
mutate(emphotel = emphotel * 10,
pop = pop * 10
)
## linear interpolation to deal with missing values
ct_spdata_long %<>%
mutate(across(c(tarl:inavexp), \(x) zoo::na.approx(x, rule = 2)))
## check if there are still NA left
sum(is.na(ct_spdata_long))
## rearrange the rows
ct_spdata_long %<>% arrange(year, indicator)
## check they are in the right position. Important!
identical(ct_spdata_wide$城市shapefile,( ct_spdata_long %>% filter(year == 2011))$城市shapefile)
## panel
## CAUTION: panel structure will mess things up when calculating Moran's I
panel_ct_spdata_long <- pdata.frame(ct_spdata_long, index = c("城市shapefile", "year"))
## summarize the data
summary(ct_spdata_long)
## deprecated. 8nn may be too large.
## Identify coordinates of the centroid of the multipolygon
## coords <- st_centroid(st_geometry(ct_spdata_wide))
## Create our 8 NN matrix
## Note that the latitude and longitude are handled using great circle distances
## R2 distances will be inaccurate
## knn8W <- knearneigh(coords, k = 8)
## Convert our knn object to neighborhood list
## list8nn <- knn2nb(knn8W)
## Convert to a matrix object
## matrix8nn <- spdep::nb2mat(list8nn)
## Convert our neighborhood list to an listw object
## listw8nn <- spdep::nb2listw(list8nn)
## Plot the neighborhood relationships
## plot(list8nn, coords)
## Identify coordinates of the centroid of the multipolygon
coords <- st_centroid(st_geometry(ct_spdata_wide))
## Create our 3,4,5,6 NN matrix
## Note that the latitude and longitude are handled using great circle distances
## R2 distances will be inaccurate
knn3W <- knearneigh(coords, k = 3)
knn4W <- knearneigh(coords, k = 4)
knn5W <- knearneigh(coords, k = 5)
knn6W <- knearneigh(coords, k = 6)
## Convert our knn objects to neighborhood list
list3nn <- knn2nb(knn3W)
list4nn <- knn2nb(knn4W)
list5nn <- knn2nb(knn5W)
list6nn <- knn2nb(knn6W)
## Convert to a matrix object
matrix3nn <- spdep::nb2mat(list3nn)
matrix4nn <- spdep::nb2mat(list4nn)
matrix5nn <- spdep::nb2mat(list5nn)
matrix6nn <- spdep::nb2mat(list6nn)
## Convert our neighborhood list to an listw object
listw4nn <- spdep::nb2listw(list4nn)
## Plot the neighborhood relationships
# plot(list4nn, coords)
## Neighbourhood contiguity by distance
d100nb <- dnearneigh(coords, 0, 100)
d150nb <- dnearneigh(coords, 0, 150)
d200nb <- dnearneigh(coords, 0, 200)
summary(d200nb)
## convert them to matrix
d100nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd100nb
d150nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd150nb
d200nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd200nb
## Create another weighting matrix based on contiguity relations (queen).
##ct_spdata_wide %>% spdep::poly2nb("geometry") %>%
##  spdep::nb2mat(zero.policy = TRUE) -> matrixcont
##ct_spdata_wide %>% spdep::poly2nb("geometry") %>%  spdep::nb2listw(zero.policy = TRUE) -> listwnb
## Create spatial lag for some variables
splag <- function(x, n, t, w){
wx <- rep(NA, length(x))
# create spatial lags
for (i in 1:t){
wx[(n*(i-1)+1):(n*i)] <- w %*% as.matrix(x[(n*(i-1)+1):(n*i)])
}
wx
}
ct_spdata_long$lagtarl = splag(x = ct_spdata_long$tarl, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagGDP = splag(x = ct_spdata_long$GDP, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagGDPpc = splag(x = ct_spdata_long$GDPpc, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagslry = splag(x = ct_spdata_long$slry, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagtarl = splag(x = ct_spdata_long$tarl, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagpop = splag(x = ct_spdata_long$pop, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagterti = splag(x = ct_spdata_long$terti, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$laginvest = splag(x = ct_spdata_long$invest, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagtaxi = splag(x = ct_spdata_long$taxi, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$laghotel = splag(x = ct_spdata_long$hotel, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagspot5A = splag(x = ct_spdata_long$spot5A, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$laggrnld = splag(x = ct_spdata_long$grnld, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagavexp = splag(x = ct_spdata_long$tavexp, n = 32, t = 9, w = matrix6nn)
panel_ct_spdata_long <- ct_spdata_long %>% pdata.frame(index = c("城市shapefile", "year"))
panel_tlaged_ct_spdata_long <- panel_ct_spdata_long
## Use the independent variables from the previous year
for (i in 8:ncol(panel_tlaged_ct_spdata_long)) {
panel_tlaged_ct_spdata_long[[i]] <- as.numeric(lag(panel_tlaged_ct_spdata_long[[i]], 1))
}
## Drop all observations with missing values
panel_tlaged_ct_spdata_long <- panel_tlaged_ct_spdata_long %>% filter(!(year == 2011)) %>% arrange(year, indicator)
tlaged_ct_spdata_long <- panel_tlaged_ct_spdata_long
tlaged_ct_spdata_long <- lapply(tlaged_ct_spdata_long, function(x){attr(x, "index") <- NULL; x}) %>% as.data.frame()  %>% arrange(year, indicator)
summary(tlaged_ct_spdata_long)
## Create indicators using total arrivals
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_tarl = case_when(
tarl >= lagtarl ~  1,
tarl < lagtarl ~ 0
)
)
## Create indicators using GDP
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_gdp = case_when(
GDP >= lagGDP ~  1,
GDP < lagGDP ~ 0
)
)
## Create indicators using GDP per capita
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_gdppc = case_when(
GDPpc >= lagGDPpc ~  1,
GDPpc < lagGDPpc ~ 0
)
)
## Create indicators using third industry development level
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_terti = case_when(
terti >= lagterti ~  1,
terti < lagterti ~ 0
)
)
summary(tlaged_ct_spdata_long)
# check they are in the right position
# important!!
location_test <- rep(FALSE, 8)
for (i in 1:8){
location_test[[i]] <-   identical(ct_spdata_wide$城市shapefile,(as.character(tlaged_ct_spdata_long$城市shapefile))[(32*(i-1)+1):(32*i)])
}
location_test
tlaged_ct_spdata_long %>%
as.data.frame() %>%
select(!geometry) %>%
xlsx::write.xlsx2("/Users/jialiangchen/Documents/spmodeltoruism/codes/regions_2regime/northeast/tlaged_northeast_spdata_long.xlsx")
