## Convert our knn objects to neighborhood list
list3nn <- knn2nb(knn3W)
list4nn <- knn2nb(knn4W)
list5nn <- knn2nb(knn5W)
list6nn <- knn2nb(knn6W)
## Convert to a matrix object
matrix3nn <- spdep::nb2mat(list3nn)
matrix4nn <- spdep::nb2mat(list4nn)
matrix5nn <- spdep::nb2mat(list5nn)
matrix6nn <- spdep::nb2mat(list6nn)
## Convert our neighborhood list to an listw object
listw6nn <- spdep::nb2listw(list6nn)
## Plot the neighborhood relationships
# plot(list4nn, coords)
## Neighbourhood contiguity by distance
d100nb <- dnearneigh(coords, 0, 100)
d150nb <- dnearneigh(coords, 0, 150)
d200nb <- dnearneigh(coords, 0, 200)
summary(d200nb)
## convert them to matrix
d100nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd100nb
d150nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd150nb
d200nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd200nb
## Create another weighting matrix based on contiguity relations (queen).
##ct_spdata_wide %>% spdep::poly2nb("geometry") %>%
##  spdep::nb2mat(zero.policy = TRUE) -> matrixcont
##ct_spdata_wide %>% spdep::poly2nb("geometry") %>%  spdep::nb2listw(zero.policy = TRUE) -> listwnb
## Create spatial lag for some variables
splag <- function(x, n, t, w){
wx <- rep(NA, length(x))
# create spatial lags
for (i in 1:t){
wx[(n*(i-1)+1):(n*i)] <- w %*% as.matrix(x[(n*(i-1)+1):(n*i)])
}
wx
}
ct_spdata_long$lagtarl = splag(x = ct_spdata_long$tarl, n = 283, t = 9, w = matrix6nn)
ct_spdata_long$lagGDP = splag(x = ct_spdata_long$GDP, n = 283, t = 9, w = matrix6nn)
ct_spdata_long$lagGDPpc = splag(x = ct_spdata_long$GDPpc, n = 283, t = 9, w = matrix6nn)
ct_spdata_long$lagslry = splag(x = ct_spdata_long$slry, n = 283, t = 9, w = matrix6nn)
ct_spdata_long$lagtarl = splag(x = ct_spdata_long$tarl, n = 283, t = 9, w = matrix6nn)
ct_spdata_long$lagpop = splag(x = ct_spdata_long$pop, n = 283, t = 9, w = matrix6nn)
ct_spdata_long$lagterti = splag(x = ct_spdata_long$terti, n = 283, t = 9, w = matrix6nn)
ct_spdata_long$laginvest = splag(x = ct_spdata_long$invest, n = 283, t = 9, w = matrix6nn)
ct_spdata_long$lagtaxi = splag(x = ct_spdata_long$taxi, n = 283, t = 9, w = matrix6nn)
ct_spdata_long$laghotel = splag(x = ct_spdata_long$hotel, n = 283, t = 9, w = matrix6nn)
ct_spdata_long$lagspot5A = splag(x = ct_spdata_long$spot5A, n = 283, t = 9, w = matrix6nn)
ct_spdata_long$laggrnld = splag(x = ct_spdata_long$grnld, n = 283, t = 9, w = matrix6nn)
ct_spdata_long$lagavexp = splag(x = ct_spdata_long$tavexp, n = 283, t = 9, w = matrix6nn)
ct_spdata_long$lagdens = splag(x = ct_spdata_long$Density, n = 283, t = 9, w = matrix6nn)
panel_ct_spdata_long <- ct_spdata_long %>% pdata.frame(index = c("城市shapefile", "year"))
panel_tlaged_ct_spdata_long <- panel_ct_spdata_long
## Use the independent variables from the previous year
for (i in 9:ncol(panel_tlaged_ct_spdata_long)) {
panel_tlaged_ct_spdata_long[[i]] <- as.numeric(lag(panel_tlaged_ct_spdata_long[[i]], 1))
}
## Drop all observations with missing values
panel_tlaged_ct_spdata_long <- panel_tlaged_ct_spdata_long %>% filter(!(year == 2011)) %>% arrange(year, indicator)
tlaged_ct_spdata_long <- panel_tlaged_ct_spdata_long
tlaged_ct_spdata_long <- lapply(tlaged_ct_spdata_long, function(x){attr(x, "index") <- NULL; x}) %>% as.data.frame()  %>% arrange(year, indicator)
summary(tlaged_ct_spdata_long)
## Create indicators using total arrivals
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_tarl = case_when(
tarl >= lagtarl ~  1,
tarl < lagtarl ~ 0
)
)
## Create indicators using GDP
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_gdp = case_when(
GDP >= lagGDP ~  1,
GDP < lagGDP ~ 0
)
)
## Create indicators using GDP per capita
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_gdppc = case_when(
GDPpc >= lagGDPpc ~  1,
GDPpc < lagGDPpc ~ 0
)
)
## Create indicators using Density, compared to neighbors
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_dens_nb = case_when(
Density >= lagdens ~  1,
Density < lagdens ~ 0
)
)
## Create indicators using Density, compared to country mean
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_dens_mean = case_when(
Density >= Country_mean_dens ~  1,
Density < Country_mean_dens ~ 0
)
)
summary(tlaged_ct_spdata_long)
cor(ct_spdata_long$tarl, ct_spdata_long$Area)
rm(list=ls())
## Load and install the R packages we might will be using.
pacman::p_load(sf, tidyverse, magrittr, data.table, hrbrthemes, zoo, GWmodel, spatialreg, spdep, plm, splm, pspatreg, zoo, chatgpt, xlsx, olsrr)
# Replace the absolute path of the `cities_included.shp` file on your computer.
# Drag the file to terminal (command + space, then search `terminal` on spotlight) if you are in mac, the path will appear.
ct_shape <- st_read("/Users/jialiangchen/Documents/spmodeltoruism/shapefiles/china_second_level_admin_shape/cities_included.shp")
## Import more data.
## change the absolute path on your computer, same as above
ct_data <- read.csv("/Users/jialiangchen/Documents/spmodeltoruism/data/dataforR.csv")
## Perform a left join for our datasets.
ct_spdata_wide <- left_join(
ct_shape %>% select(NL_NAME_2, geometry) %>% rename(城市shapefile = NL_NAME_2),
ct_data,
by = "城市shapefile"
)
ct_spdata_wide %<>% arrange(城市shapefile)
ct_spdata_wide$indicator = 1:283
# unit = square kilometers
ct_spdata_wide$Area <- ct_spdata_wide %>% st_area %>% (function(x) as.numeric(x)/1000000)
ct_spdata_wide %<>% select(indicator, 城市shapefile, City, geometry, Lat, Long, Area, everything())
## Reshape our data to long(tidy) form.
ct_spdata_long <- ct_spdata_wide %>%
pivot_longer(
cols = tarl_2011:grnld_2019,
names_to = c(".value", "year"),
names_pattern = "(.+)_(.+)"
) %>% select(indicator, everything())
## Create average tourist expenditure variable in RMBs
ct_spdata_long %<>%
mutate(
tavexp =  (trev/tarl)*1000,
dmavexp = (dmrev/dmarl)*1000
)
## Some place has zero international arrival
## Avoid division by zero
ct_spdata_long %<>%
mutate(
inavexp = case_when(
inarl > 0 ~  (inrev/inarl)*7*1000,
inarl == 0 ~  0
)
)
## Create average tourist expenditure variable in RMBs## Convert the "human" variables from 10 thousands to thousands, just for consistency
ct_spdata_long %<>%
mutate(emphotel = emphotel * 10,
pop = pop * 10
)
## linear interpolation to deal with missing values
ct_spdata_long %<>%
mutate(across(c(tarl:inavexp), \(x) zoo::na.approx(x, rule = 2)))
## check if there are still NA left
sum(is.na(ct_spdata_long))
## rearrange the rows
ct_spdata_long %<>% arrange(year, indicator)
## create tourism density variable
ct_spdata_long$Density <- numeric(2547)
for (i in 1:9){
ct_spdata_long$Density[(283*(i-1)+1):(283*i)] <-
ct_spdata_long$trev[(283*(i-1)+1):(283*i)] / (ct_spdata_long$Area[(283*(i-1)+1):(283*i)])
}
## create country mean density
ct_spdata_long$Country_mean_dens <- numeric(2547)
for (i in 1:9){
ct_spdata_long$Country_mean_dens[(283*(i-1)+1):(283*i)] <-
mean(ct_spdata_long$Density[(283*(i-1)+1):(283*i)])
}
# tourism density plot
#ct_spdata_long %>% filter(year == 2015) %>% ggplot() +
#    geom_sf(aes(fill = Density), alpha = 0.8, col = "white")+
#    scale_fill_viridis_c(name = "Tourism Density")+
#    ggtitle("Tourism density.")
## Important!
## check they are in the right position.
identical(ct_spdata_wide$城市shapefile,( ct_spdata_long %>% filter(year == 2013))$城市shapefile)
## panel
## CAUTION: panel structure will mess things up when calculating Moran's I
#panel_ct_spdata_long <- pdata.frame(ct_spdata_long, index = c("indicator", "year"))
## summarize the data
summary(ct_spdata_long)
ct_spdata_long %>% filter(year == 2019) %>% ggplot() +
geom_sf(aes(fill = Density), alpha = 0.8, col = "white")+
scale_fill_viridis_c(name = "Tourism Density")+
ggtitle("Tourism density.")
## Load and install the R packages we might will be using.
rm(list=ls())
pacman::p_load(sf, tidyverse, magrittr, data.table, hrbrthemes, zoo, GWmodel, spatialreg, spdep, plm, splm, pspatreg, zoo, chatgpt, xlsx, olsrr)
# Replace the absolute path of the `cities_included.shp` file on your computer.
# Drag the file to terminal (command + space, then search `terminal` on spotlight) if you are in mac, the path will appear.
ct_shape <- st_read("/Users/jialiangchen/Documents/spmodeltoruism/shapefiles/east/east.shp")
## Import more data.
## change the absolute path on your computer, same as above
ct_data <- read.csv("/Users/jialiangchen/Documents/spmodeltoruism/data/dataforR.csv")
## Perform a left join for our datasets.
ct_spdata_wide <- left_join(
ct_shape %>% select(NL_NAME_2, geometry) %>% rename(城市shapefile = NL_NAME_2),
ct_data,
by = "城市shapefile"
)
ct_spdata_wide %<>% arrange(城市shapefile)
ct_spdata_wide$indicator = 1:86
# unit = square kilometers
ct_spdata_wide$Area <- ct_spdata_wide %>% st_area %>% (function(x) as.numeric(x)/1000000)
ct_spdata_wide %<>% select(indicator, 城市shapefile, City, geometry, Lat, Long, Area, everything())
## Reshape our data to long(tidy) form.
ct_spdata_long <- ct_spdata_wide %>%
pivot_longer(
cols = tarl_2011:grnld_2019,
names_to = c(".value", "year"),
names_pattern = "(.+)_(.+)"
) %>% select(indicator, everything())
## Create average tourist expenditure variable in RMBs
ct_spdata_long %<>%
mutate(
tavexp =  (trev/tarl)*1000,
dmavexp = (dmrev/dmarl)*1000
)
## Some place has zero international arrival
## Avoid division by zero
ct_spdata_long %<>%
mutate(
inavexp = case_when(
inarl > 0 ~  (inrev/inarl)*7*1000,
inarl == 0 ~  0
)
)
## Create average tourist expenditure variable in RMBs## Convert the "human" variables from 10 thousands to thousands, just for consistency
ct_spdata_long %<>%
mutate(emphotel = emphotel * 10,
pop = pop * 10
)
## linear interpolation to deal with missing values
ct_spdata_long %<>%
mutate(across(c(tarl:inavexp), \(x) zoo::na.approx(x, rule = 2)))
## check if there are still NA left
sum(is.na(ct_spdata_long))
## rearrange the rows
ct_spdata_long %<>% arrange(year, indicator)
## create tourism density variable
ct_spdata_long$Density <- numeric(774)
for (i in 1:9){
ct_spdata_long$Density[(86*(i-1)+1):(86*i)] <-
ct_spdata_long$trev[(86*(i-1)+1):(86*i)] / (ct_spdata_long$Area[(86*(i-1)+1):(86*i)])
}
## create country mean density
ct_spdata_long$Country_mean_dens <- numeric(774)
for (i in 1:9){
ct_spdata_long$Country_mean_dens[(86*(i-1)+1):(86*i)] <-
mean(ct_spdata_long$Density[(86*(i-1)+1):(86*i)])
}
# tourism density plot
#ct_spdata_long %>% filter(year == 2015) %>% ggplot() +
#    geom_sf(aes(fill = Density), alpha = 0.8, col = "white")+
#    scale_fill_viridis_c(name = "Tourism Density")+
#    ggtitle("Tourism density.")
## check they are in the right position. Important!
identical(ct_spdata_wide$城市shapefile,( ct_spdata_long %>% filter(year == 2011))$城市shapefile)
## panel
## CAUTION: panel structure will mess things up when calculating Moran's I
panel_ct_spdata_long <- pdata.frame(ct_spdata_long, index = c("城市shapefile", "year"))
## summarize the data
summary(ct_spdata_long)
ct_spdata_long %>% filter(year == 2019) %>% ggplot() +
geom_sf(aes(fill = Density), alpha = 0.8, col = "white")+
scale_fill_viridis_c(name = "Tourism Density")+
ggtitle("Tourism density.")
## Load and install the R packages we might will be using.
pacman::p_load(sf, tidyverse, magrittr, data.table, hrbrthemes, zoo, GWmodel, spatialreg, spdep, plm, splm, pspatreg, zoo, chatgpt, xlsx, olsrr)
# Replace the absolute path of the `cities_included.shp` file on your computer.
# Drag the file to terminal (command + space, then search `terminal` on spotlight) if you are in mac, the path will appear.
ct_shape <- st_read("/Users/jialiangchen/Documents/spmodeltoruism/shapefiles/central/central.shp")
## Import more data.
## change the absolute path on your computer, same as above
ct_data <- read.csv("/Users/jialiangchen/Documents/spmodeltoruism/data/dataforR.csv")
## Perform a left join for our datasets.
ct_spdata_wide <- left_join(
ct_shape %>% select(NL_NAME_2, geometry) %>% rename(城市shapefile = NL_NAME_2),
ct_data,
by = "城市shapefile"
)
ct_spdata_wide %<>% arrange(城市shapefile)
ct_spdata_wide$indicator = 1:80
# unit = square kilometers
ct_spdata_wide$Area <- ct_spdata_wide %>% st_area %>% (function(x) as.numeric(x)/1000000)
ct_spdata_wide %<>% select(indicator, 城市shapefile, City, geometry, Lat, Long, Area, everything())
## Reshape our data to long(tidy) form.
ct_spdata_long <- ct_spdata_wide %>%
pivot_longer(
cols = tarl_2011:grnld_2019,
names_to = c(".value", "year"),
names_pattern = "(.+)_(.+)"
) %>% select(indicator, everything())
## Create average tourist expenditure variable in RMBs
ct_spdata_long %<>%
mutate(
tavexp =  (trev/tarl)*1000,
dmavexp = (dmrev/dmarl)*1000
)
## Some place has zero international arrival
## Avoid division by zero
ct_spdata_long %<>%
mutate(
inavexp = case_when(
inarl > 0 ~  (inrev/inarl)*7*1000,
inarl == 0 ~  0
)
)
## Create average tourist expenditure variable in RMBs## Convert the "human" variables from 10 thousands to thousands, just for consistency
ct_spdata_long %<>%
mutate(emphotel = emphotel * 10,
pop = pop * 10
)
## linear interpolation to deal with missing values
ct_spdata_long %<>%
mutate(across(c(tarl:inavexp), \(x) zoo::na.approx(x, rule = 2)))
## check if there are still NA left
sum(is.na(ct_spdata_long))
## rearrange the rows
ct_spdata_long %<>% arrange(year, indicator)
## create tourism density variable
ct_spdata_long$Density <- numeric(720)
for (i in 1:9){
ct_spdata_long$Density[(80*(i-1)+1):(80*i)] <-
ct_spdata_long$trev[(80*(i-1)+1):(80*i)] / (ct_spdata_long$Area[(80*(i-1)+1):(80*i)])
}
## create country mean density
ct_spdata_long$Country_mean_dens <- numeric(720)
for (i in 1:9){
ct_spdata_long$Country_mean_dens[(80*(i-1)+1):(80*i)] <-
mean(ct_spdata_long$Density[(80*(i-1)+1):(80*i)])
}
# tourism density plot
#ct_spdata_long %>% filter(year == 2015) %>% ggplot() +
#    geom_sf(aes(fill = Density), alpha = 0.8, col = "white")+
#    scale_fill_viridis_c(name = "Tourism Density")+
#    ggtitle("Tourism density.")
## check they are in the right position. Important!
identical(ct_spdata_wide$城市shapefile,( ct_spdata_long %>% filter(year == 2011))$城市shapefile)
## panel
## CAUTION: panel structure will mess things up when calculating Moran's I
panel_ct_spdata_long <- pdata.frame(ct_spdata_long, index = c("城市shapefile", "year"))
## summarize the data
summary(ct_spdata_long)
ct_spdata_long %>% filter(year == 2019) %>% ggplot() +
geom_sf(aes(fill = Density), alpha = 0.8, col = "white")+
scale_fill_viridis_c(name = "Tourism Density")+
ggtitle("Tourism density.")
rm(list=ls())
## Load and install the R packages we might will be using.
pacman::p_load(sf, tidyverse, magrittr, data.table, hrbrthemes, zoo, GWmodel, spatialreg, spdep, plm, splm, pspatreg, zoo, chatgpt, xlsx, olsrr)
# Replace the absolute path of the `cities_included.shp` file on your computer.
# Drag the file to terminal (command + space, then search `terminal` on spotlight) if you are in mac, the path will appear.
ct_shape <- st_read("/Users/jialiangchen/Documents/spmodeltoruism/shapefiles/west/west.shp")
## Import more data.
## change the absolute path on your computer, same as above
ct_data <- read.csv("/Users/jialiangchen/Documents/spmodeltoruism/data/dataforR.csv")
## Perform a left join for our datasets.
ct_spdata_wide <- left_join(
ct_shape %>% select(NL_NAME_2, geometry) %>% rename(城市shapefile = NL_NAME_2),
ct_data,
by = "城市shapefile"
)
ct_spdata_wide %<>% arrange(城市shapefile)
ct_spdata_wide$indicator = 1:85
# unit = square kilometers
ct_spdata_wide$Area <- ct_spdata_wide %>% st_area %>% (function(x) as.numeric(x)/1000000)
ct_spdata_wide %<>% select(indicator, 城市shapefile, City, geometry, Lat, Long, Area, everything())
## Reshape our data to long(tidy) form.
ct_spdata_long <- ct_spdata_wide %>%
pivot_longer(
cols = tarl_2011:grnld_2019,
names_to = c(".value", "year"),
names_pattern = "(.+)_(.+)"
) %>% select(indicator, everything())
## Create average tourist expenditure variable in RMBs
ct_spdata_long %<>%
mutate(
tavexp =  (trev/tarl)*1000,
dmavexp = (dmrev/dmarl)*1000
)
## Some place has zero international arrival
## Avoid division by zero
ct_spdata_long %<>%
mutate(
inavexp = case_when(
inarl > 0 ~  (inrev/inarl)*7*1000,
inarl == 0 ~  0
)
)
## Create average tourist expenditure variable in RMBs## Convert the "human" variables from 10 thousands to thousands, just for consistency
ct_spdata_long %<>%
mutate(emphotel = emphotel * 10,
pop = pop * 10
)
## linear interpolation to deal with missing values
ct_spdata_long %<>%
mutate(across(c(tarl:inavexp), \(x) zoo::na.approx(x, rule = 2)))
## check if there are still NA left
sum(is.na(ct_spdata_long))
## rearrange the rows
ct_spdata_long %<>% arrange(year, indicator)
## create tourism density variable
ct_spdata_long$Density <- numeric(765)
for (i in 1:9){
ct_spdata_long$Density[(85*(i-1)+1):(85*i)] <-
ct_spdata_long$trev[(85*(i-1)+1):(85*i)] / (ct_spdata_long$Area[(85*(i-1)+1):(85*i)])
}
## create country mean density
ct_spdata_long$Country_mean_dens <- numeric(765)
for (i in 1:9){
ct_spdata_long$Country_mean_dens[(85*(i-1)+1):(85*i)] <-
mean(ct_spdata_long$Density[(85*(i-1)+1):(85*i)])
}
# tourism density plot
#ct_spdata_long %>% filter(year == 2015) %>% ggplot() +
#    geom_sf(aes(fill = Density), alpha = 0.8, col = "white")+
#    scale_fill_viridis_c(name = "Tourism Density")+
#    ggtitle("Tourism density.")
## check they are in the right position. Important!
identical(ct_spdata_wide$城市shapefile,( ct_spdata_long %>% filter(year == 2011))$城市shapefile)
## panel
## CAUTION: panel structure will mess things up when calculating Moran's I
panel_ct_spdata_long <- pdata.frame(ct_spdata_long, index = c("城市shapefile", "year"))
## summarize the data
summary(ct_spdata_long)
ct_spdata_long %>% filter(year == 2019) %>% ggplot() +
geom_sf(aes(fill = Density), alpha = 0.8, col = "white")+
scale_fill_viridis_c(name = "Tourism Density")+
ggtitle("Tourism density.")
## Load and install the R packages we might will be using.
pacman::p_load(sf, tidyverse, magrittr, data.table, hrbrthemes, zoo, GWmodel, spatialreg, spdep, plm, splm, pspatreg, zoo, chatgpt, xlsx, olsrr)
# Replace the absolute path of the `cities_included.shp` file on your computer.
# Drag the file to terminal (command + space, then search `terminal` on spotlight) if you are in mac, the path will appear.
ct_shape <- st_read("/Users/jialiangchen/Documents/spmodeltoruism/shapefiles/northeast/norteast.shp")
## Import more data.
## change the absolute path on your computer, same as above
ct_data <- read.csv("/Users/jialiangchen/Documents/spmodeltoruism/data/dataforR.csv")
## Perform a left join for our datasets.
ct_spdata_wide <- left_join(
ct_shape %>% select(NL_NAME_2, geometry) %>% rename(城市shapefile = NL_NAME_2),
ct_data,
by = "城市shapefile"
)
ct_spdata_wide %<>% arrange(城市shapefile)
ct_spdata_wide$indicator = 1:32
# unit = square kilometers
ct_spdata_wide$Area <- ct_spdata_wide %>% st_area %>% (function(x) as.numeric(x)/1000000)
ct_spdata_wide %<>% select(indicator, 城市shapefile, City, geometry, Lat, Long, Area, everything())
## Reshape our data to long(tidy) form.
ct_spdata_long <- ct_spdata_wide %>%
pivot_longer(
cols = tarl_2011:grnld_2019,
names_to = c(".value", "year"),
names_pattern = "(.+)_(.+)"
) %>% select(indicator, everything())
## Create average tourist expenditure variable in RMBs
ct_spdata_long %<>%
mutate(
tavexp =  (trev/tarl)*1000,
dmavexp = (dmrev/dmarl)*1000
)
## Some place has zero international arrival
## Avoid division by zero
ct_spdata_long %<>%
mutate(
inavexp = case_when(
inarl > 0 ~  (inrev/inarl)*7*1000,
inarl == 0 ~  0
)
)
## Create average tourist expenditure variable in RMBs## Convert the "human" variables from 10 thousands to thousands, just for consistency
ct_spdata_long %<>%
mutate(emphotel = emphotel * 10,
pop = pop * 10
)
## linear interpolation to deal with missing values
ct_spdata_long %<>%
mutate(across(c(tarl:inavexp), \(x) zoo::na.approx(x, rule = 2)))
## check if there are still NA left
sum(is.na(ct_spdata_long))
## rearrange the rows
ct_spdata_long %<>% arrange(year, indicator)
## create tourism density variable
ct_spdata_long$Density <- numeric(288)
for (i in 1:9){
ct_spdata_long$Density[(32*(i-1)+1):(32*i)] <-
ct_spdata_long$trev[(32*(i-1)+1):(32*i)] / (ct_spdata_long$Area[(32*(i-1)+1):(32*i)])
}
## create country mean density
ct_spdata_long$Country_mean_dens <- numeric(288)
for (i in 1:9){
ct_spdata_long$Country_mean_dens[(32*(i-1)+1):(32*i)] <-
mean(ct_spdata_long$Density[(32*(i-1)+1):(32*i)])
}
# tourism density plot
#ct_spdata_long %>% filter(year == 2015) %>% ggplot() +
#    geom_sf(aes(fill = Density), alpha = 0.8, col = "white")+
#    scale_fill_viridis_c(name = "Tourism Density")+
#    ggtitle("Tourism density.")
## check they are in the right position. Important!
identical(ct_spdata_wide$城市shapefile,( ct_spdata_long %>% filter(year == 2011))$城市shapefile)
## panel
## CAUTION: panel structure will mess things up when calculating Moran's I
panel_ct_spdata_long <- pdata.frame(ct_spdata_long, index = c("城市shapefile", "year"))
## summarize the data
summary(ct_spdata_long)
ct_spdata_long %>% filter(year == 2019) %>% ggplot() +
geom_sf(aes(fill = Density), alpha = 0.8, col = "white")+
scale_fill_viridis_c(name = "Tourism Density")+
ggtitle("Tourism density.")
