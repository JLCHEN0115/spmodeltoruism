normality_test <- (results %>% filter(standized_resid >= -2 & standized_resid <= 2))$standized_resid %>% ols_test_normality()
normality_test
panel_results <- pdata.frame(results, index = c("indicator", "year"))
panel_results <- panel_results %>% mutate(tlaged_resid = lag(panel_results[["resid"]], 1))
panel_results <- panel_results %>% mutate(tlagedlaged_resid = lag(panel_results[["resid"]], 2))
panel_results <- panel_results %>% mutate(tlagedlagedlaged_resid = lag(panel_results[["resid"]], 3))
resid_plot1 <- panel_results %>% as.data.frame() %>% ggplot(aes(x=resid, y=tlaged_resid)) + geom_point(size = 1)
resid_plot2 <- panel_results %>% as.data.frame() %>% ggplot(aes(x=resid, y=tlagedlaged_resid)) + geom_point(size = 1)
resid_plot3 <-  panel_results %>% as.data.frame() %>% ggplot(aes(x=resid, y=tlagedlagedlaged_resid)) + geom_point(size = 1)
p4 <- gridExtra::grid.arrange(
resid_plot1,
resid_plot2,
resid_plot3,
nrow = 1
)
## calculate serial correlation for each observation
ser_corr <- vector("list", length(283))
cities_names <- ct_spdata_wide[["城市shapefile"]]
for (i in 1:283){
ser_corr[[i]] <- (results %>% filter(城市shapefile == cities_names[[i]]) %>% select(resid) %>% unlist() %>% EnvStats::serialCorrelationTest(test="rank.von.Neumann"))$p.value
}
mean(ser_corr < 0.1)
p4 <- gridExtra::grid.arrange(
resid_plot1,
resid_plot2,
resid_plot3,
nrow = 1
)
## calculate serial correlation for each observation
ser_corr <- vector("list", length(283))
cities_names <- ct_spdata_wide[["城市shapefile"]]
for (i in 1:283){
ser_corr[[i]] <- (results %>% filter(城市shapefile == cities_names[[i]]) %>% select(resid) %>% unlist() %>% EnvStats::serialCorrelationTest(test="rank.von.Neumann"))$p.value
}
mean(ser_corr < 0.1)
slmtest(resid ~ 1, data = results, listw = listw6nn, index = c("indicator", "year"), model="pooling", test = "lml")
slmtest(resid ~ 1, data = results, listw = listw6nn, index = c("indicator", "year"), model="pooling", test = "rlml")
slmtest(resid ~ 1, data = results, listw = listw6nn, index = c("indicator", "year"), model="pooling", test = "lml")
slmtest(resid ~ 1, data = results, listw = listw6nn, index = c("indicator", "year"), model="pooling", test = "elme")
slmtest(resid ~ 1, data = results, listw = listw6nn, index = c("indicator", "year"), model="pooling", test = "rlme")
slmtest(resid ~ 1, data = results, listw = listw6nn, index = c("indicator", "year"), model="pooling", test = "lml")
?lm.LMtests
slmtest(resid ~ 1, data = results, listw = listw6nn, index = c("indicator", "year"), model="pooling", test = "rlml")
slmtest(resid ~ 1, data = results, listw = listw6nn, index = c("indicator", "year"), model="pooling", test = "rlme")
slmtest(resid ~ 1, data = results, listw = listw6nn, index = c("indicator", "year"), model="pooling", test = "lme")
slmtest(resid ~ 1, data = results, listw = listw6nn, index = c("indicator", "year"), model="pooling", test = "lml")
{y <- 1; 2}
mean(1,2,3)
?mean
mean(c(1, 2, 3))
?plot
plot.default
j04 <- function() invisible(1)
j04
jo4()
j04()
(jo4())
(j04())
print(j04())
jo4(3)
j04(3)
withVisible(j04())
str(withVisible(j04()))
a <- 2
(a <- 2)
a <- b <- c <- d <- 3
pwd
getwd()
cd "/Users/jialiangchen/Documents/spmodeltoruism/codes/regions_2regime/northeast"
setwd( "/Users/jialiangchen/Documents/spmodeltoruism/codes/regions_2regime/northeast")
## Load and install the R packages we might will be using.
pacman::p_load(sf, tidyverse, magrittr, data.table, hrbrthemes, zoo, GWmodel, spatialreg, spdep, plm, splm, pspatreg, zoo, chatgpt, xlsx, olsrr)
# Replace the absolute path of the `cities_included.shp` file on your computer.
# Drag the file to terminal (command + space, then search `terminal` on spotlight) if you are in mac, the path will appear.
ct_shape <- st_read("/Users/jialiangchen/Documents/spmodeltoruism/shapefiles/northeast/norteast.shp")
## Import more data.
## change the absolute path on your computer, same as above
ct_data <- read.csv("/Users/jialiangchen/Documents/spmodeltoruism/data/dataforR.csv")
## Perform a left join for our datasets.
ct_spdata_wide <- left_join(
ct_shape %>% select(NL_NAME_2, geometry) %>% rename(城市shapefile = NL_NAME_2),
ct_data,
by = "城市shapefile"
)
ct_spdata_wide %<>% arrange(城市shapefile)
ct_spdata_wide$indicator = 1:32
ct_spdata_wide %<>% select(indicator, everything())
## Reshape our data to long(tidy) form.
ct_spdata_long <- ct_spdata_wide %>%
pivot_longer(
cols = tarl_2011:grnld_2019,
names_to = c(".value", "year"),
names_pattern = "(.+)_(.+)"
) %>% select(indicator, everything())
## Create average tourist expenditure variable in RMBs
ct_spdata_long %<>%
mutate(
tavexp =  (trev/tarl)*1000,
dmavexp = (dmrev/dmarl)*1000
)
## Some place has zero international arrival
## Avoid division by zero
ct_spdata_long %<>%
mutate(
inavexp = case_when(
inarl > 0 ~  (inrev/inarl)*7*1000,
inarl == 0 ~  0
)
)
## Create average tourist expenditure variable in RMBs## Convert the "human" variables from 10 thousands to thousands, just for consistency
ct_spdata_long %<>%
mutate(emphotel = emphotel * 10,
pop = pop * 10
)
## linear interpolation to deal with missing values
ct_spdata_long %<>%
mutate(across(c(tarl:inavexp), \(x) zoo::na.approx(x, rule = 2)))
## check if there are still NA left
sum(is.na(ct_spdata_long))
## rearrange the rows
ct_spdata_long %<>% arrange(year, indicator)
## check they are in the right position. Important!
identical(ct_spdata_wide$城市shapefile,( ct_spdata_long %>% filter(year == 2011))$城市shapefile)
## panel
## CAUTION: panel structure will mess things up when calculating Moran's I
panel_ct_spdata_long <- pdata.frame(ct_spdata_long, index = c("城市shapefile", "year"))
## summarize the data
summary(ct_spdata_long)
## deprecated. 8nn may be too large.
## Identify coordinates of the centroid of the multipolygon
## coords <- st_centroid(st_geometry(ct_spdata_wide))
## Create our 8 NN matrix
## Note that the latitude and longitude are handled using great circle distances
## R2 distances will be inaccurate
## knn8W <- knearneigh(coords, k = 8)
## Convert our knn object to neighborhood list
## list8nn <- knn2nb(knn8W)
## Convert to a matrix object
## matrix8nn <- spdep::nb2mat(list8nn)
## Convert our neighborhood list to an listw object
## listw8nn <- spdep::nb2listw(list8nn)
## Plot the neighborhood relationships
## plot(list8nn, coords)
## Identify coordinates of the centroid of the multipolygon
coords <- st_centroid(st_geometry(ct_spdata_wide))
## Create our 3,4,5,6 NN matrix
## Note that the latitude and longitude are handled using great circle distances
## R2 distances will be inaccurate
knn3W <- knearneigh(coords, k = 3)
knn4W <- knearneigh(coords, k = 4)
knn5W <- knearneigh(coords, k = 5)
knn6W <- knearneigh(coords, k = 6)
## Convert our knn objects to neighborhood list
list3nn <- knn2nb(knn3W)
list4nn <- knn2nb(knn4W)
list5nn <- knn2nb(knn5W)
list6nn <- knn2nb(knn6W)
## Convert to a matrix object
matrix3nn <- spdep::nb2mat(list3nn)
matrix4nn <- spdep::nb2mat(list4nn)
matrix5nn <- spdep::nb2mat(list5nn)
matrix6nn <- spdep::nb2mat(list6nn)
## Convert our neighborhood list to an listw object
listw3nn <- spdep::nb2listw(list3nn)
## Plot the neighborhood relationships
# plot(list4nn, coords)
## Neighbourhood contiguity by distance
d100nb <- dnearneigh(coords, 0, 100)
d150nb <- dnearneigh(coords, 0, 150)
d200nb <- dnearneigh(coords, 0, 200)
summary(d200nb)
## convert them to matrix
d100nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd100nb
d150nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd150nb
d200nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd200nb
## Create another weighting matrix based on contiguity relations (queen).
ct_spdata_wide %>% spdep::poly2nb("geometry") %>%
spdep::nb2mat(zero.policy = TRUE) -> matrixcont
ct_spdata_wide %>% spdep::poly2nb("geometry") %>%  spdep::nb2listw(zero.policy = TRUE) -> listwnb
## Create spatial lag for some variables
splag <- function(x, n, t, w){
wx <- rep(NA, length(x))
# create spatial lags
for (i in 1:t){
wx[(n*(i-1)+1):(n*i)] <- w %*% as.matrix(x[(n*(i-1)+1):(n*i)])
}
wx
}
ct_spdata_long$lagtarl = splag(x = ct_spdata_long$tarl, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagGDPpc = splag(x = ct_spdata_long$GDPpc, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagslry = splag(x = ct_spdata_long$slry, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagtarl = splag(x = ct_spdata_long$tarl, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagpop = splag(x = ct_spdata_long$pop, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagterti = splag(x = ct_spdata_long$terti, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$laginvest = splag(x = ct_spdata_long$invest, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagtaxi = splag(x = ct_spdata_long$taxi, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$laghotel = splag(x = ct_spdata_long$hotel, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagspot5A = splag(x = ct_spdata_long$spot5A, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$laggrnld = splag(x = ct_spdata_long$grnld, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagavexp = splag(x = ct_spdata_long$tavexp, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagtrev = splag(x = ct_spdata_long$trev, n = 32, t = 9, w = matrix6nn)
panel_ct_spdata_long <- ct_spdata_long %>% pdata.frame(index = c("城市shapefile", "year"))
panel_tlaged_ct_spdata_long <- panel_ct_spdata_long
## Use the independent variables from the previous year
for (i in 8:ncol(panel_tlaged_ct_spdata_long)) {
panel_tlaged_ct_spdata_long[[i]] <- as.numeric(lag(panel_tlaged_ct_spdata_long[[i]], 1))
}
## Drop all observations with missing values
panel_tlaged_ct_spdata_long <- panel_tlaged_ct_spdata_long %>% filter(!(year == 2011)) %>% arrange(year, indicator)
tlaged_ct_spdata_long <- panel_tlaged_ct_spdata_long
tlaged_ct_spdata_long <- lapply(tlaged_ct_spdata_long, function(x){attr(x, "index") <- NULL; x}) %>% as.data.frame()  %>% arrange(year, indicator)
summary(tlaged_ct_spdata_long)
## Create indicators using revenues
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_trev = case_when(
trev >= lagtrev ~  1,
trev < lagtrev ~ 0
)
)
## Create indicators using total arrivals
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_tarl = case_when(
tarl >= lagtarl ~  1,
tarl < lagtarl ~ 0
)
)
## percentage total arrivals
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(tarl_percent = (tarl - lagtarl) / lagtarl)
summary(tlaged_ct_spdata_long$tarl_percent)
## first quantile
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_tarlne50 = case_when(
tarl_percent >= -0.5420 ~  1,
tarl_percent < -0.5420 ~ 0
)
)
## third quantile
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_tarlps10 = case_when(
tarl_percent >= 0.1166 ~  1,
tarl_percent < 0.1166 ~ 0
)
)
## stars
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_tarlstars = case_when(
tarl_percent >= 0.5 ~  1,
tarl_percent < 0.5 ~ 0
)
)
## Create indicators using GDP per capita
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_gdp = case_when(
GDPpc >= lagGDPpc ~  1,
GDPpc < lagGDPpc ~ 0
)
)
## percentage GDP gap
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(GDP_percent = (GDPpc - lagGDPpc) / lagGDPpc)
summary(tlaged_ct_spdata_long$GDP_percent)
## first quantile
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_gdpne30 = case_when(
GDP_percent >= -0.30478 ~  1,
GDP_percent < -0.30478 ~ 0
)
)
## third quantile
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_gdpps25 = case_when(
GDP_percent >= 0.24466 ~  1,
GDP_percent < 0.24466 ~ 0
)
)
## stars
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_gdpps50 = case_when(
GDP_percent >= 0.5 ~  1,
GDP_percent < 0.5 ~ 0
)
)
## Create indicators using number of hotels
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_hotel = case_when(
hotel >= laghotel ~  1,
hotel < laghotel ~ 0
)
)
## Create indicators using number of 5A spots
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_5A = case_when(
spot5A >= lagspot5A ~  1,
spot5A < lagspot5A ~ 0
)
)
## Create indicators using third industry development level
tlaged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(
indicator_terti = case_when(
terti >= lagterti ~  1,
terti < lagterti ~ 0
)
)
summary(tlaged_ct_spdata_long)
View(matrix4nn)
View(tlaged_ct_spdata_long)
# check they are in the right position
# important!!
location_test <- rep(FALSE, 8)
for (i in 1:8){
location_test[[i]] <-   identical(ct_spdata_wide$城市shapefile,(as.character(tlaged_ct_spdata_long$城市shapefile))[(32*(i-1)+1):(32*i)])
}
location_test
matrix5nn %>% as.data.frame() %>% write.xlsx2("/Users/jialiangchen/Documents/spmodeltoruism/codes/regions_2regime/northeast/5nnmatrix.xlsx")
matrix6nn %>% as.data.frame() %>% write.xlsx2("/Users/jialiangchen/Documents/spmodeltoruism/codes/regions_2regime/northeast/6nnmatrix.xlsx")
matrix4nn %>% as.data.frame() %>% write.xlsx2("/Users/jialiangchen/Documents/spmodeltoruism/codes/regions_2regime/northeast/4nnmatrix.xlsx")
matrix4nn %>% as.data.frame() %>% write.xlsx2("/Users/jialiangchen/Documents/spmodeltoruism/codes/regions_2regime/northeast/4nnmatrix.xlsx")
matrix3nn %>% as.data.frame() %>% write.xlsx2("/Users/jialiangchen/Documents/spmodeltoruism/codes/regions_2regime/northeast/3nnmatrix.xlsx")
## Transfer all variables to log scale
tlaged_logged_ct_spdata_long <- tlaged_ct_spdata_long %>%
mutate(across(c(tarl:inrev, hprice:road, invest:lagpop, laginvest:lagtrev), \(x) log(x+1)))
## Model tests
formula0 <- tarl ~ GDPpc + slry + pop + terti + invest + taxi + hotel + spot5A + grnld + tavexp + lagGDPpc + lagslry + lagpop + lagterti + laginvest + lagtaxi + laghotel + lagspot5A + laggrnld + lagavexp
formula1 <- tarl ~ GDPpc + slry + terti + invest + taxi + hotel + spot5A + grnld + tavexp + lagGDPpc + lagslry + lagterti + laginvest + lagtaxi + laghotel + lagspot5A + laggrnld + lagavexp
formula_nosplag <- tarl ~ GDPpc + slry + pop + terti + invest + taxi + hotel + spot5A + grnld + tavexp
formula0 <- tarl ~ GDPpc + slry + pop + terti + invest + taxi + hotel + spot5A + grnld + tavexp + lagGDPpc + lagslry + lagpop + lagterti + laginvest + lagtaxi + laghotel + lagspot5A + laggrnld + lagavexp
formula1 <- tarl ~ GDPpc + slry + terti + invest + taxi + hotel + spot5A + grnld + tavexp + lagGDPpc + lagslry + lagterti + laginvest + lagtaxi + laghotel + lagspot5A + laggrnld + lagavexp
formula_nosplag <- tarl ~ GDPpc + slry + pop + terti + invest + taxi + hotel + spot5A + grnld + tavexp
preg_nonspatial <- plm(formula = tarl ~ GDPpc + slry + pop + terti + invest + taxi + hotel + spot5A + grnld + tavexp, data = tlaged_logged_ct_spdata_long, index = c("indicator", "year"), model = "pooling")
summary(preg_nonspatial)
preg0 <- spml(formula = formula0, data = tlaged_logged_ct_spdata_long, index = c("indicator", "year"), listw = listw6nn, model = "pooling", lag = TRUE, spatial.error = "none")
summary(preg0)
preg0 <- spml(formula = formula0, data = tlaged_logged_ct_spdata_long, index = c("indicator", "year"), listw = listw6nn, model = "pooling", lag = TRUE, spatial.error = "none")
## Convert our neighborhood list to an listw object
listw4nn <- spdep::nb2listw(list4nn)
preg0 <- spml(formula = formula0, data = tlaged_logged_ct_spdata_long, index = c("indicator", "year"), listw = listw4nn, model = "pooling", lag = TRUE, spatial.error = "none")
summary(preg0)
## FE individual
preg1_fe_ind <- spml(formula = formula0, data = tlaged_logged_ct_spdata_long, listw = listw4nn, model = "within", effect = "individual", lag = TRUE, spatial.error = "none", index = c("indicator", "year"))
## FE time
preg1_fe_time <- spml(formula = formula0, data = tlaged_logged_ct_spdata_long, listw = listw4nn, model = "within", effect = "time", lag = TRUE, spatial.error = "none", index = c("indicator", "year"))
## FE twoway
preg1_fe <- spml(formula = formula0, data = tlaged_logged_ct_spdata_long, listw = listw4nn, model = "within", effect = "twoway", lag = TRUE, spatial.error = "none", index = c("indicator", "year"))
## see what if we estimate the random effect model
preg1_re <- spml(formula = formula0, data = tlaged_logged_ct_spdata_long, index = c("indicator", "year"), listw = listw4nn, model = "random", lag = TRUE, spatial.error = "none")
summary(preg1_fe_ind)
summary(preg1_fe_time)
summary(preg1_fe)
summary(preg1_re)
## Calculate likelihood ratio test statistics for individaul fe
lr_stat_ind_fe <- 2 * (preg1_fe_ind$logLik - preg0$logLik)
lr_stat_ind_fe
## Find chi-squared critical value for 282 degrees of freedom
qchisq(0.99, 282)
## Test if likelihood ratio test statistic is greater than critical value
lr_stat_ind_fe > qchisq(0.99, 282)
## Calculate p-value of test
1 - pchisq(lr_stat_ind_fe, 282)
summary(preg1_re)
## Calculate likelihood ratio test statistics for time fe
lr_stat_time_fe <- 2 * (preg1_fe_time$logLik - preg0$logLik)
lr_stat_time_fe
## Find chi-squared critical value for 282 degrees of freedom
qchisq(0.999, 7)
## Test if likelihood ratio test statistic is greater than critical value
lr_stat_time_fe > qchisq(0.999, 7)
## Calculate p-value of test
1 - pchisq(lr_stat_ind_fe, 282)
bsktest(formula0, data = tlaged_logged_ct_spdata_long, listw = listw4nn, index = c("indicator", "year"), test = "LMH")
bsktest(formula0, data = tlaged_logged_ct_spdata_long, listw = listw4nn, index = c("indicator", "year"), test = "CLMlambda")
bsktest(formula0, data = tlaged_logged_ct_spdata_long, listw = listw4nn, index = c("indicator", "year"), test = "CLMmu")
## $H_{0}:$ The preferred model is Random Effect
sphtest(x = formula_nosplag, data = tlaged_logged_ct_spdata_long, listw = listw4nn, index = c("indicator", "year"), spatial.model = "lag", method = "ML")
slmtest(formula = formula0, data = tlaged_logged_ct_spdata_long, listw = listw4nn, index = c("indicator", "year"), model = "within", test = "lme")
slmtest(formula = formula0, data = tlaged_logged_ct_spdata_long, listw = listw4nn, index = c("indicator", "year"), model = "within", test = "lml")
slmtest(formula = formula0, data = tlaged_logged_ct_spdata_long, listw = listw4nn, index = c("indicator", "year"), test = "lme")
slmtest(formula = formula0, data = tlaged_logged_ct_spdata_long, listw = listw4nn, index = c("indicator", "year"), test = "lml")
slmtest(formula = formula0, data = tlaged_logged_ct_spdata_long, listw = listw4nn, index = c("indicator", "year"), test = "rlme")
slmtest(formula = formula0, data = tlaged_logged_ct_spdata_long, listw = listw4nn, index = c("indicator", "year"), test = "rlml")
## import and wrange regression results data
results <- read.xlsx("/Users/jialiangchen/Documents/spmodeltoruism/codes/regions_2regime/northeast/results.xlsx", 1) %>% data.table::transpose(make.names = "OriginalVariableNames") %>% mutate(城市shapefile =tlaged_logged_ct_spdata_long$城市shapefile, indicator = tlaged_logged_ct_spdata_long$indicator, year = tlaged_logged_ct_spdata_long$year) %>% select(c("indicator", "城市shapefile", "year", "y", "yhat", "resid"))
## our cols are co coerased into characters, we need to bring them back to numeric values
results[c("y", "yhat", "resid")] <- map(results[c("y", "yhat", "resid")], as.numeric)
## take a look of the results
str(results)
## check we did it correct
sum(results$y - tlaged_logged_ct_spdata_long$tarl) # should be basically 0, up to some rounding error
## To test for normality, we need to first standardize the redisuals
results <- results %>% mutate(standized_resid = resid / sd(resid))
## kdensity plot of the redisual
data <- data.frame(x = rnorm(300))
resid_plot <- ggplot(data = results, aes(x = standized_resid)) +
stat_function(fun = dnorm,
args = list(mean = mean(data$x),
sd = sd(data$x)),
col = "#1b98e0",
size = 0.5) +
geom_density()
resid_plot
## Q-Q plot
qq_residuals <- ggplot() +
geom_abline(color = "red") +
geom_qq(aes(sample = results$standized_resid)) +
geom_vline(xintercept = c(-2, 2), linetype="dotted",
color = "blue", linewidth = 1) +
coord_fixed()
qq_residuals
normality_test <- (results %>% filter(standized_resid >= -2 & standized_resid <= 2))$standized_resid %>% ols_test_normality()
normality_test
normality_test <- results$standized_resid %>% ols_test_normality()
normality_test
normality_test <- results$standized_resid %>% ols_test_normality()
normality_test
panel_results <- pdata.frame(results, index = c("indicator", "year"))
panel_results <- panel_results %>% mutate(tlaged_resid = lag(panel_results[["resid"]], 1))
panel_results <- panel_results %>% mutate(tlagedlaged_resid = lag(panel_results[["resid"]], 2))
panel_results <- panel_results %>% mutate(tlagedlagedlaged_resid = lag(panel_results[["resid"]], 3))
resid_plot1 <- panel_results %>% as.data.frame() %>% ggplot(aes(x=resid, y=tlaged_resid)) + geom_point(size = 1)
resid_plot2 <- panel_results %>% as.data.frame() %>% ggplot(aes(x=resid, y=tlagedlaged_resid)) + geom_point(size = 1)
resid_plot3 <-  panel_results %>% as.data.frame() %>% ggplot(aes(x=resid, y=tlagedlagedlaged_resid)) + geom_point(size = 1)
p4 <- gridExtra::grid.arrange(
resid_plot1,
resid_plot2,
resid_plot3,
nrow = 1
)
gridExtra::grid.arrange(
resid_plot1,
resid_plot2,
resid_plot3,
nrow = 1
)
## calculate serial correlation for each observation
ser_corr <- vector("list", length(283))
cities_names <- ct_spdata_wide[["城市shapefile"]]
for (i in 1:283){
ser_corr[[i]] <- (results %>% filter(城市shapefile == cities_names[[i]]) %>% select(resid) %>% unlist() %>% EnvStats::serialCorrelationTest(test="rank.von.Neumann"))$p.value
}
for (i in 1:32){
ser_corr[[i]] <- (results %>% filter(城市shapefile == cities_names[[i]]) %>% select(resid) %>% unlist() %>% EnvStats::serialCorrelationTest(test="rank.von.Neumann"))$p.value
}
mean(ser_corr < 0.1)
mean(ser_corr < 0.05)
mean(ser_corr < 0.01)
mean(ser_corr < 0.05)
## calculate serial correlation for each observation
ser_corr <- vector("list", length(32))
cities_names <- ct_spdata_wide[["城市shapefile"]]
for (i in 1:32){
ser_corr[[i]] <- (results %>% filter(城市shapefile == cities_names[[i]]) %>% select(resid) %>% unlist() %>% EnvStats::serialCorrelationTest(test="rank.von.Neumann"))$p.value
}
mean(ser_corr < 0.05)
mean(ser_corr < 0.1)
mean(ser_corr < 0.05)
slmtest(resid ~ 1, data = results, listw = listw6nn, index = c("indicator", "year"), test = "lml")
slmtest(resid ~ 1, data = results, listw = listw4nn, index = c("indicator", "year"), test = "lml")
slmtest(resid ~ 1, data = results, listw = listw4nn, index = c("indicator", "year"), test = "rlml")
slmtest(resid ~ 1, data = results, listw = listw4nn, index = c("indicator", "year"), test = "lml")
BPtest <- plm(resid ~ yhat, data = results, model = "pooling")
summary(BPtest)
## visual test
results <- results %>% mutate(srqt_standized_resid = sqrt(abs(standized_resid)))
hmsk_plot <- results %>% as.data.frame() %>% ggplot(aes(yhat, srqt_standized_resid)) +
geom_point() +
geom_smooth()
hmsk_plot
## calculate the Breusch-Pagan test statistics
BP_stat = 2264 * r.squared(BPtest)
## Find chi-squared critical value for 1 degree of freedom
qchisq(0.99, 1)
## Test if likelihood ratio test statistic is greater than critical value
BP_stat > qchisq(0.99, 1)
## Calculate p-value of test
1 - pchisq(BP_stat, 1)
BP_stat
## Calculate likelihood ratio test statistics for individaul fe
lr_stat_slag_indep <- 2 * (preg0$logLik - preg_nonspatial$logLik)
lr_stat_slag_indep
## Calculate likelihood ratio test statistics for individaul fe
lr_stat_slag_indep <- 2 * (preg0$logLik - preg_nonspatial$logLik)
lr_stat_slag_indep
preg0 <- spml(formula = formula0, data = tlaged_logged_ct_spdata_long, index = c("indicator", "year"), listw = listw4nn, model = "pooling", lag = TRUE, spatial.error = "none")
preg_nonspatial <- plm(formula = tarl ~ GDPpc + slry + pop + terti + invest + taxi + hotel + spot5A + grnld + tavexp, data = tlaged_logged_ct_spdata_long, index = c("indicator", "year"), model = "pooling")
## Calculate likelihood ratio test statistics for individaul fe
lr_stat_slag_indep <- 2 * (preg0$logLik - preg_nonspatial$logLik)
lr_stat_slag_indep
preg0$logLik
preg_nonspatial$logLik
preg_nospatial_ml <- spml(formula = formula_nosplag, data = tlaged_logged_ct_spdata_long, index = c("indicator", "year"), listw = listw4nn, model = "pooling", lag = TRUE, spatial.error = "none")
## Calculate likelihood ratio test statistics for individaul fe
lr_stat_slag_indep <- 2 * (preg0$logLik - preg_nospatial_ml$logLik)
lr_stat_slag_indep
## Find chi-squared critical value for 10 degrees of freedom
qchisq(0.99, 10)
## Test if likelihood ratio test statistic is greater than critical value
lr_stat_ind_fe > qchisq(0.99, 10)
## Calculate p-value of test
1 - pchisq(lr_stat_ind_fe, 282)
sphtest(preg1_fe, preg1_re)
