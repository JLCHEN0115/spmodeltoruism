## Convert to a matrix object
## matrix8nn <- spdep::nb2mat(list8nn)
## Convert our neighborhood list to an listw object
## listw8nn <- spdep::nb2listw(list8nn)
## Plot the neighborhood relationships
## plot(list8nn, coords)
## Identify coordinates of the centroid of the multipolygon
coords <- st_centroid(st_geometry(ct_spdata_wide))
## Create our 3,4,5,6 NN matrix
## Note that the latitude and longitude are handled using great circle distances
## R2 distances will be inaccurate
knn3W <- knearneigh(coords, k = 3)
knn4W <- knearneigh(coords, k = 4)
knn5W <- knearneigh(coords, k = 5)
knn6W <- knearneigh(coords, k = 6)
## Convert our knn objects to neighborhood list
list3nn <- knn2nb(knn3W)
list4nn <- knn2nb(knn4W)
list5nn <- knn2nb(knn5W)
list6nn <- knn2nb(knn6W)
## Convert to a matrix object
matrix3nn <- spdep::nb2mat(list3nn)
matrix4nn <- spdep::nb2mat(list4nn)
matrix5nn <- spdep::nb2mat(list5nn)
matrix6nn <- spdep::nb2mat(list6nn)
## Convert our neighborhood list to an listw object
listw3nn <- spdep::nb2listw(list3nn)
## Plot the neighborhood relationships
# plot(list4nn, coords)
# ## Neighbourhood contiguity by distance
# d100nb <- dnearneigh(coords, 0, 100)
# d150nb <- dnearneigh(coords, 0, 150)
# d200nb <- dnearneigh(coords, 0, 200)
# summary(d200nb)
#
# ## convert them to matrix
# d100nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd100nb
# d150nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd150nb
# d200nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd200nb
## Create another weighting matrix based on contiguity relations (queen).
ct_spdata_wide %>% spdep::poly2nb("geometry") %>%
spdep::nb2mat(zero.policy = TRUE) -> matrixcont
ct_spdata_wide %>% spdep::poly2nb("geometry") %>%  spdep::nb2listw(zero.policy = TRUE) -> listwnb
## Create spatial lag for some variables
splag <- function(x, n, t, w){
wx <- rep(NA, length(x))
# create spatial lags
for (i in 1:t){
wx[(n*(i-1)+1):(n*i)] <- w %*% as.matrix(x[(n*(i-1)+1):(n*i)])
}
wx
}
ct_spdata_long$lagtarl = splag(x = ct_spdata_long$tarl, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagGDP = splag(x = ct_spdata_long$GDP, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagGDPpc = splag(x = ct_spdata_long$GDPpc, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagslry = splag(x = ct_spdata_long$slry, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagtarl = splag(x = ct_spdata_long$tarl, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagpop = splag(x = ct_spdata_long$pop, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagterti = splag(x = ct_spdata_long$terti, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$laginvest = splag(x = ct_spdata_long$invest, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagtaxi = splag(x = ct_spdata_long$taxi, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$laghotel = splag(x = ct_spdata_long$hotel, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagspot5A = splag(x = ct_spdata_long$spot5A, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$laggrnld = splag(x = ct_spdata_long$grnld, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagavexp = splag(x = ct_spdata_long$tavexp, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagdens = splag(x = ct_spdata_long$Density, n = 85, t = 9, w = matrix6nn)
ct_spdata_long$lagemphotel = splag(x = ct_spdata_long$emphotel, n = 85, t = 9, w = matrix6nn)
#panel_ct_spdata_long <- ct_spdata_long %>% pdata.frame(index = c("城市shapefile", "year"))
#panel_tlaged_ct_spdata_long <- panel_ct_spdata_long
## Use the independent variables from the previous year
#for (i in 15:ncol(panel_tlaged_ct_spdata_long)) {
#  panel_tlaged_ct_spdata_long[[i]] <- as.numeric(lag(panel_tlaged_ct_spdata_long[[i]], 1))
#}
## Create a time lag y
#panel_tlaged_ct_spdata_long$tlagtrev <- as.numeric(lag(panel_tlaged_ct_spdata_long$trev, 1))
## Drop all observations with missing values
#panel_tlaged_ct_spdata_long <- panel_tlaged_ct_spdata_long %>% filter(!(year == 2011)) %>% arrange(year, indicator)
#tlaged_ct_spdata_long <- panel_tlaged_ct_spdata_long
#tlaged_ct_spdata_long <- lapply(tlaged_ct_spdata_long, function(x){attr(x, "index") <- NULL; x}) %>% as.data.frame()  %>% arrange(year, indicator)
#summary(tlaged_ct_spdata_long)
## Create indicators using total arrivals
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_tarl = case_when(
tarl >= lagtarl ~  1,
tarl < lagtarl ~ 0
)
)
## Create indicators using total arrivals, 60 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_tarl_60 = case_when(
(tarl - lagtarl)/tarl >= 0.6 ~  1,
(tarl - lagtarl)/tarl < 0.6 ~ 0
)
)
## Create indicators using total arrivals, 70 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_tarl_70 = case_when(
(tarl - lagtarl)/tarl >= 0.7 ~  1,
(tarl - lagtarl)/tarl < 0.7 ~ 0
)
)
## Create indicators using total arrivals, 80 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_tarl_80 = case_when(
(tarl - lagtarl)/tarl >= 0.8 ~  1,
(tarl - lagtarl)/tarl < 0.8 ~ 0
)
)
## Create indicators using GDP
#ct_spdata_long <- ct_spdata_long %>%
#   mutate(
#     indicator_gdp = case_when(
#      GDP >= lagGDP ~  1,
#      GDP < lagGDP ~ 0
#     )
#   )
## Create indicators using GDP per capita
# ct_spdata_long <- ct_spdata_long %>%
#    mutate(
#      indicator_gdppc = case_when(
#       GDPpc >= lagGDPpc ~  1,
#       GDPpc < lagGDPpc ~ 0
#      )
#    )
## Create indicators using Density, compared to neighbors
#ct_spdata_long <- ct_spdata_long %>%
#   mutate(
#     indicator_dens_nb = case_when(
#      Density >= lagdens ~  1,
#      Density < lagdens ~ 0
#     )
#   )
## Create indicators using Density, compared to regional mean
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_dens_mean = case_when(
Density >= Region_mean_dens ~  1,
Density < Region_mean_dens ~ 0
)
)
## Create indicators using Density, compared to regional mean, 60 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_dens_mean_60 = case_when(
(Density-Region_mean_dens)/Region_mean_dens >= 0.6 ~  1,
(Density-Region_mean_dens)/Region_mean_dens < 0.6 ~ 0
)
)
## Create indicators using Density, compared to regional mean, 70 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_dens_mean_70 = case_when(
(Density-Region_mean_dens)/Region_mean_dens >= 0.7 ~  1,
(Density-Region_mean_dens)/Region_mean_dens < 0.7 ~ 0
)
)
## Create indicators using Density, compared to regional mean, 80 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_dens_mean_80 = case_when(
(Density-Region_mean_dens)/Region_mean_dens >= 0.8 ~  1,
(Density-Region_mean_dens)/Region_mean_dens < 0.8 ~ 0
)
)
## Crease indicators using hotel numbers
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_hotel = case_when(
hotel >= laghotel ~  1,
hotel < laghotel ~ 0
)
)
## Crease indicators using hotel numbers, 60 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_hotel_60 = case_when(
(hotel-laghotel)/laghotel >= 0.6 ~  1,
(hotel-laghotel)/laghotel < 0.6 ~ 0
)
)
## Crease indicators using hotel numbers, 70 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_hotel_70 = case_when(
(hotel-laghotel)/laghotel >= 0.7 ~  1,
(hotel-laghotel)/laghotel < 0.7 ~ 0
)
)
## Crease indicators using hotel numbers, 80 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_hotel_80 = case_when(
(hotel-laghotel)/laghotel >= 0.8 ~  1,
(hotel-laghotel)/laghotel < 0.8 ~ 0
)
)
summary(ct_spdata_long)
85 * 9
sum(ct_spdata_long$indicator_tarl)
sum(ct_spdata_long$indicator_tarl_60)
sum(ct_spdata_long$indicator_tarl_70)
sum(ct_spdata_long$indicator_dens_mean)
sum(ct_spdata_long$indicator_dens_mean_60)
sum(ct_spdata_long$indicator_dens_mean_70)
sum(ct_spdata_long$indicator_dens_mean_80)
sum(ct_spdata_long$indicator_hotel)
sum(ct_spdata_long$indicator_hotel_60)
sum(ct_spdata_long$indicator_hotel_70)
sum(ct_spdata_long$indicator_hotel_80)
## Load and install the R packages we might will be using.
pacman::p_load(sf, tidyverse, magrittr, data.table, hrbrthemes, zoo, GWmodel, spatialreg, spdep, plm, splm, pspatreg, zoo, chatgpt, xlsx, olsrr)
# Replace the absolute path of the `cities_included.shp` file on your computer.
# Drag the file to terminal (command + space, then search `terminal` on spotlight) if you are in mac, the path will appear.
ct_shape <- st_read("/Users/jialiangchen/Documents/spmodeltoruism/shapefiles/northeast/norteast.shp")
## Import more data.
## change the absolute path on your computer, same as above
ct_data <- read.csv("/Users/jialiangchen/Documents/spmodeltoruism/data/dataforR.csv")
## Perform a left join for our datasets.
ct_spdata_wide <- left_join(
ct_shape %>% select(NL_NAME_2, geometry) %>% rename(城市shapefile = NL_NAME_2),
ct_data,
by = "城市shapefile"
)
ct_spdata_wide %<>% arrange(城市shapefile)
ct_spdata_wide$indicator = 1:32
# unit = square kilometers
ct_spdata_wide$Area <- ct_spdata_wide %>% st_area %>% (function(x) as.numeric(x)/1000000)
ct_spdata_wide %<>% select(indicator, 城市shapefile, City, geometry, Lat, Long, Area, everything())
## Reshape our data to long(tidy) form.
ct_spdata_long <- ct_spdata_wide %>%
pivot_longer(
cols = tarl_2011:grnld_2019,
names_to = c(".value", "year"),
names_pattern = "(.+)_(.+)"
) %>% select(indicator, everything())
## Create average tourist expenditure variable in RMBs
ct_spdata_long %<>%
mutate(
tavexp =  (trev/tarl)*1000,
dmavexp = (dmrev/dmarl)*1000
)
## Some place has zero international arrival
## Avoid division by zero
ct_spdata_long %<>%
mutate(
inavexp = case_when(
inarl > 0 ~  (inrev/inarl)*7*1000,
inarl == 0 ~  0
)
)
## Create average tourist expenditure variable in RMBs## Convert the "human" variables from 10 thousands to thousands, just for consistency
ct_spdata_long %<>%
mutate(emphotel = emphotel * 10,
pop = pop * 10
)
## linear interpolation to deal with missing values
ct_spdata_long %<>%
mutate(across(c(tarl:inavexp), \(x) zoo::na.approx(x, rule = 2)))
## check if there are still NA left
sum(is.na(ct_spdata_long))
## rearrange the rows
ct_spdata_long %<>% arrange(year, indicator)
## create tourism density variable
ct_spdata_long$Density <- numeric(288)
for (i in 1:9){
ct_spdata_long$Density[(32*(i-1)+1):(32*i)] <-
ct_spdata_long$trev[(32*(i-1)+1):(32*i)] / (ct_spdata_long$Area[(32*(i-1)+1):(32*i)])
}
## create regional mean density
ct_spdata_long$Region_mean_dens <- numeric(288)
for (i in 1:9){
ct_spdata_long$Region_mean_dens[(32*(i-1)+1):(32*i)] <-
mean(ct_spdata_long$Density[(32*(i-1)+1):(32*i)])
}
# tourism density plot
#ct_spdata_long %>% filter(year == 2015) %>% ggplot() +
#    geom_sf(aes(fill = Density), alpha = 0.8, col = "white")+
#    scale_fill_viridis_c(name = "Tourism Density")+
#    ggtitle("Tourism density.")
## check they are in the right position. Important!
identical(ct_spdata_wide$城市shapefile,( ct_spdata_long %>% filter(year == 2011))$城市shapefile)
## panel
## CAUTION: panel structure will mess things up when calculating Moran's I
#panel_ct_spdata_long <- pdata.frame(ct_spdata_long, index = c("城市shapefile", "year"))
## summarize the data
summary(ct_spdata_long)
## deprecated. 8nn may be too large.
## Identify coordinates of the centroid of the multipolygon
## coords <- st_centroid(st_geometry(ct_spdata_wide))
## Create our 8 NN matrix
## Note that the latitude and longitude are handled using great circle distances
## R2 distances will be inaccurate
## knn8W <- knearneigh(coords, k = 8)
## Convert our knn object to neighborhood list
## list8nn <- knn2nb(knn8W)
## Convert to a matrix object
## matrix8nn <- spdep::nb2mat(list8nn)
## Convert our neighborhood list to an listw object
## listw8nn <- spdep::nb2listw(list8nn)
## Plot the neighborhood relationships
## plot(list8nn, coords)
## Identify coordinates of the centroid of the multipolygon
coords <- st_centroid(st_geometry(ct_spdata_wide))
## Create our 3,4,5,6 NN matrix
## Note that the latitude and longitude are handled using great circle distances
## R2 distances will be inaccurate
knn3W <- knearneigh(coords, k = 3)
knn4W <- knearneigh(coords, k = 4)
knn5W <- knearneigh(coords, k = 5)
knn6W <- knearneigh(coords, k = 6)
## Convert our knn objects to neighborhood list
list3nn <- knn2nb(knn3W)
list4nn <- knn2nb(knn4W)
list5nn <- knn2nb(knn5W)
list6nn <- knn2nb(knn6W)
## Convert to a matrix object
matrix3nn <- spdep::nb2mat(list3nn)
matrix4nn <- spdep::nb2mat(list4nn)
matrix5nn <- spdep::nb2mat(list5nn)
matrix6nn <- spdep::nb2mat(list6nn)
## Convert our neighborhood list to an listw object
listw4nn <- spdep::nb2listw(list4nn)
## Plot the neighborhood relationships
# plot(list4nn, coords)
# ## Neighbourhood contiguity by distance
# d100nb <- dnearneigh(coords, 0, 100)
# d150nb <- dnearneigh(coords, 0, 150)
# d200nb <- dnearneigh(coords, 0, 200)
# summary(d200nb)
#
# ## convert them to matrix
# d100nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd100nb
# d150nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd150nb
# d200nb %>% spdep::nb2mat(zero.policy = TRUE) -> matrixd200nb
## Create another weighting matrix based on contiguity relations (queen).
##ct_spdata_wide %>% spdep::poly2nb("geometry") %>%
##  spdep::nb2mat(zero.policy = TRUE) -> matrixcont
##ct_spdata_wide %>% spdep::poly2nb("geometry") %>%  spdep::nb2listw(zero.policy = TRUE) -> listwnb
## Create spatial lag for some variables
splag <- function(x, n, t, w){
wx <- rep(NA, length(x))
# create spatial lags
for (i in 1:t){
wx[(n*(i-1)+1):(n*i)] <- w %*% as.matrix(x[(n*(i-1)+1):(n*i)])
}
wx
}
ct_spdata_long$lagtarl = splag(x = ct_spdata_long$tarl, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagGDP = splag(x = ct_spdata_long$GDP, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagGDPpc = splag(x = ct_spdata_long$GDPpc, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagslry = splag(x = ct_spdata_long$slry, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagtarl = splag(x = ct_spdata_long$tarl, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagpop = splag(x = ct_spdata_long$pop, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagterti = splag(x = ct_spdata_long$terti, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$laginvest = splag(x = ct_spdata_long$invest, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagtaxi = splag(x = ct_spdata_long$taxi, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$laghotel = splag(x = ct_spdata_long$hotel, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagspot5A = splag(x = ct_spdata_long$spot5A, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$laggrnld = splag(x = ct_spdata_long$grnld, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagavexp = splag(x = ct_spdata_long$tavexp, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagdens = splag(x = ct_spdata_long$Density, n = 32, t = 9, w = matrix6nn)
ct_spdata_long$lagemphotel = splag(x = ct_spdata_long$emphotel, n = 32, t = 9, w = matrix6nn)
#panel_ct_spdata_long <- ct_spdata_long %>% pdata.frame(index = c("城市shapefile", "year"))
#panel_tlaged_ct_spdata_long <- panel_ct_spdata_long
## Use the independent variables from the previous year
#for (i in 15:ncol(panel_tlaged_ct_spdata_long)) {
#  panel_tlaged_ct_spdata_long[[i]] <- as.numeric(lag(panel_tlaged_ct_spdata_long[[i]], 1))
#}
## Create a time lag y
#panel_tlaged_ct_spdata_long$tlagtrev <- as.numeric(lag(panel_tlaged_ct_spdata_long$trev, 1))
## Drop all observations with missing values
#panel_tlaged_ct_spdata_long <- panel_tlaged_ct_spdata_long %>% filter(!(year == 2011)) %>% arrange(year, indicator)
#tlaged_ct_spdata_long <- panel_tlaged_ct_spdata_long
#tlaged_ct_spdata_long <- lapply(tlaged_ct_spdata_long, function(x){attr(x, "index") <- NULL; x}) %>% as.data.frame()  %>% arrange(year, indicator)
#summary(tlaged_ct_spdata_long)
## Create indicators using total arrivals
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_tarl = case_when(
tarl >= lagtarl ~  1,
tarl < lagtarl ~ 0
)
)
## Create indicators using total arrivals, 50 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_tarl_50 = case_when(
(tarl - lagtarl)/tarl >= 0.5 ~  1,
(tarl - lagtarl)/tarl < 0.5 ~ 0
)
)
## Create indicators using total arrivals, 55 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_tarl_55 = case_when(
(tarl - lagtarl)/tarl >= 0.55 ~  1,
(tarl - lagtarl)/tarl < 0.55 ~ 0
)
)
## Create indicators using total arrivals, 60 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_tarl_60 = case_when(
(tarl - lagtarl)/tarl >= 0.6 ~  1,
(tarl - lagtarl)/tarl < 0.6 ~ 0
)
)
## Create indicators using GDP
#ct_spdata_long <- ct_spdata_long %>%
#   mutate(
#     indicator_gdp = case_when(
#      GDP >= lagGDP ~  1,
#      GDP < lagGDP ~ 0
#     )
#   )
## Create indicators using GDP per capita
# ct_spdata_long <- ct_spdata_long %>%
#    mutate(
#      indicator_gdppc = case_when(
#       GDPpc >= lagGDPpc ~  1,
#       GDPpc < lagGDPpc ~ 0
#      )
#    )
## Create indicators using Density, compared to neighbors
#ct_spdata_long <- ct_spdata_long %>%
#   mutate(
#     indicator_dens_nb = case_when(
#      Density >= lagdens ~  1,
#      Density < lagdens ~ 0
#     )
#   )
## Create indicators using Density, compared to regional mean
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_dens_mean = case_when(
Density >= Region_mean_dens ~  1,
Density < Region_mean_dens ~ 0
)
)
## Create indicators using Density, compared to regional mean, 60 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_dens_mean_60 = case_when(
(Density-Region_mean_dens)/Region_mean_dens >= 0.6 ~  1,
(Density-Region_mean_dens)/Region_mean_dens < 0.6 ~ 0
)
)
## Create indicators using Density, compared to regional mean, 70 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_dens_mean_70 = case_when(
(Density-Region_mean_dens)/Region_mean_dens >= 0.7 ~  1,
(Density-Region_mean_dens)/Region_mean_dens < 0.7 ~ 0
)
)
## Create indicators using Density, compared to regional mean, 80 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_dens_mean_80 = case_when(
(Density-Region_mean_dens)/Region_mean_dens >= 0.8 ~  1,
(Density-Region_mean_dens)/Region_mean_dens < 0.8 ~ 0
)
)
## Crease indicators using hotel numbers
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_hotel = case_when(
hotel >= laghotel ~  1,
hotel < laghotel ~ 0
)
)
## Crease indicators using hotel numbers, 60 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_hotel_60 = case_when(
(hotel-laghotel)/laghotel >= 0.6 ~  1,
(hotel-laghotel)/laghotel < 0.6 ~ 0
)
)
## Crease indicators using hotel numbers, 70 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_hotel_70 = case_when(
(hotel-laghotel)/laghotel >= 0.7 ~  1,
(hotel-laghotel)/laghotel < 0.7 ~ 0
)
)
## Crease indicators using hotel numbers, 80 percent
ct_spdata_long <- ct_spdata_long %>%
mutate(
indicator_hotel_80 = case_when(
(hotel-laghotel)/laghotel >= 0.8 ~  1,
(hotel-laghotel)/laghotel < 0.8 ~ 0
)
)
summary(ct_spdata_long)
32 * 9
sum(ct_spdata_long$indicator_tarl)
sum(ct_spdata_long$indicator_tarl_50)
sum(ct_spdata_long$indicator_tarl_55)
sum(ct_spdata_long$indicator_dens_mean)
sum(ct_spdata_long$indicator_dens_mean_60)
sum(ct_spdata_long$indicator_dens_mean_70)
sum(ct_spdata_long$indicator_dens_mean_80)
sum(ct_spdata_long$indicator_hotel)
sum(ct_spdata_long$indicator_hotel_60)
sum(ct_spdata_long$indicator_hotel_70)
sum(ct_spdata_long$indicator_hotel_80)
